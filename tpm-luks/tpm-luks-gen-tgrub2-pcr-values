#!/bin/bash -e
#
# tpm-luks-gen-tgrub2-pcr-values
#
# Parse a grub1 menu.lst file and generate the future TPM PCR values needed
# to seal a system state to. Based on the implementation of the trustedgrub
# package at http://trustedgrub.sf.net.
#
# Author: Kent Yoder <shpedoikal@gmail.com>
#
####
# NVRAM permissions file format:
#
# [r/w] [PCR#] [40 byte ascii SHA-1 value]
#
# example:
#
# r 0 f952e49a7e90037fb6ee505d80a322798012db16
# r 15 a0ea6036b734da48b57fdd0fd87218cbada887ef
# w 12 3bd4ed7984d262f1d0d71e337ea4de290e17b4bd
#
# For this example, the TPM data written will only be readable when PCR 0's
# value is f952e49a7e90037fb6ee505d80a322798012db16 and PCR 15's value is
# a0ea6036b734da48b57fdd0fd87218cbada887ef and will only be writable when
# PCR 12's value is 3bd4ed7984d262f1d0d71e337ea4de290e17b4bd.
#
####
# How do you know which PCRs to use? The canonical reference document that
# describes which PCRs are used for which purposes for TPM 1.2 is here:
#
# http://www.trustedcomputinggroup.org/files/temp/64505409-1D09-3519-AD5C611FAD3F799B/PC%20Client%20Implementation%20for%20BIOS.pdf
#
# See section 3.2.3. A summary for convenience:
#
# PCR Index	Use
# 0		CRTM, BIOS, and Host Platform Extensions
# 1		Host Platform Configuration
# 2		Option ROM Code
# 3		Option ROM Configuration and Data
# 4		IPL Code (usually the MBR)
# 5		IPL Code Configuration and Data
# 6		State Transition and Wake Events
# 7		Host Platform Manufacturer Control
# 8-15		Used by the OS
#
# An explanation of the "srtm" profile (below):
#
# PCR 4  - record measurement of trusted grub in the MBR as measured by
#          the BIOS
# PCR 5  - record the IPL config - this is a record of the boot device
#          chosen by the user
# PCR 8  - The first 512 bytes of grub stage2
# PCR 9  - The rest of stage2
# PCR 10 - record the files that trusted grub launches - kernel and
#          initramfs
# PCR 11 - record trusted grub's config file command lines - note that
#          this includes the kernel command line, so any change to the
#          kernel command line will prevent releasing the NVRAM secret!
#
#
PCRS="4 5 8 9 10 11"
TMPFILE=
SOURCE=/sys/class/tpm/tpm0/device/pcrs
OUTFILE=/dev/stdout

if [ -z "${PCRS}" ]; then
	exit 0
elif [ ! -e ${SOURCE} ]; then
	echo "PCR measurements file not found, is securityfs mounted?" 1>&2
	exit 255
fi

function usage
{
	echo "usage ${0##/*} [options]"
	echo "options:"
	echo
	echo "  -o <file> Optional file to write NVRAM permissions files to (default is stdout)"
}

while getopts "o:m:" opt; do
	case $opt in
	o)
		OUTFILE=$OPTARG
		;;
	*)
		usage
		exit 255
		;;
	esac
done

cleanup()
{
        rm -f $TMPFILE
}

TMPFILE=$(mktemp -q /tmp/${0##*/}-XXXXXX)

if [ ! -n "$TMPFILE" ]; then
        echo "Temp file creation failed" 1>&2
        exit -1
fi

trap cleanup EXIT

#echo "Writing PCRs for \"$MENU\" boot entries:"
cat $SOURCE | sed "s/ //g" > $TMPFILE
for PCRNUM in $PCRS; do
	PCRNUM2=$(printf "%02d" $PCRNUM)
	PCR=$( cat $TMPFILE | awk -F: "\$1 ~ /PCR-$PCRNUM2/ { print tolower(\$2) }" )
	echo "r $PCRNUM $PCR" >> ${OUTFILE}
done

exit 0
